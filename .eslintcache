[{"L:\\prog\\TodoTaskslist_redux-tooltkit\\TodoTaskslist\\src\\index.tsx":"1","L:\\prog\\TodoTaskslist_redux-tooltkit\\TodoTaskslist\\src\\app\\store.ts":"2","L:\\prog\\TodoTaskslist_redux-tooltkit\\TodoTaskslist\\src\\features\\TodolistsList\\tasks-reducer.ts":"3","L:\\prog\\TodoTaskslist_redux-tooltkit\\TodoTaskslist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"4","L:\\prog\\TodoTaskslist_redux-tooltkit\\TodoTaskslist\\src\\components\\EditableSpan\\EditableSpan.tsx":"5"},{"size":767,"mtime":1668581663222,"results":"6","hashOfConfig":"7"},{"size":1557,"mtime":1668581663215,"results":"8","hashOfConfig":"7"},{"size":5235,"mtime":1668581663221,"results":"9","hashOfConfig":"7"},{"size":1951,"mtime":1668581663220,"results":"10","hashOfConfig":"7"},{"size":952,"mtime":1668581663216,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iqemcc",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"L:\\prog\\TodoTaskslist_redux-tooltkit\\TodoTaskslist\\src\\index.tsx",[],"L:\\prog\\TodoTaskslist_redux-tooltkit\\TodoTaskslist\\src\\app\\store.ts",[],["24","25"],"L:\\prog\\TodoTaskslist_redux-tooltkit\\TodoTaskslist\\src\\features\\TodolistsList\\tasks-reducer.ts",["26"],"import {todolistsAPI} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {addTodolist, fetchTodolists, removeTodolist} from \"./todolists-reducer\";\r\nimport {appActions} from '../CommonActions/App'\r\nimport {AppRootStateType, ThunkError} from \"../../utils/types\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, TodolistType, UpdateTaskModelType} from \"../../api/types\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleServerNetworkError(error, thunkAPI)\r\n\r\n    }\r\n\r\n})\r\nexport const removeTask = createAsyncThunk<{ todolistId: string, taskId: string }, { todolistId: string, taskId: string }, ThunkError>('tasks/removeTask',\r\n    async (param, thunkAPI) => {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {todolistId: param.todolistId, taskId: param.taskId}\r\n    })\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                const task = res.data.data.item\r\n                return task\r\n            } else {\r\n                return handleServerAppError(res.data, thunkAPI, false);\r\n\r\n            }\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    })\r\n\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: {\r\n    taskId: string,\r\n    domainModel: UpdateDomainTaskModelType,\r\n    todolistId: string\r\n}, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find((t: TaskType) => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleServerAppError(res.data, thunkAPI);\r\n\r\n        }\r\n    } catch (error) {\r\n        return handleServerNetworkError(error, thunkAPI);\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks, removeTask, addTask, updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: TodolistType) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n})\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","L:\\prog\\TodoTaskslist_redux-tooltkit\\TodoTaskslist\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["27","28","29"],"L:\\prog\\TodoTaskslist_redux-tooltkit\\TodoTaskslist\\src\\components\\EditableSpan\\EditableSpan.tsx",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":26,"column":15,"nodeType":"36","messageId":"37","endLine":26,"endColumn":18},{"ruleId":"38","severity":1,"message":"39","line":16,"column":65,"nodeType":"40","endLine":16,"endColumn":98,"suggestions":"41"},{"ruleId":"38","severity":1,"message":"42","line":25,"column":8,"nodeType":"40","endLine":25,"endColumn":41,"suggestions":"43"},{"ruleId":"38","severity":1,"message":"42","line":29,"column":8,"nodeType":"40","endLine":29,"endColumn":41,"suggestions":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"@typescript-eslint/no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'removeTask'. Either include it or remove the dependency array.","ArrayExpression",["47"],"React Hook useCallback has a missing dependency: 'updateTask'. Either include it or remove the dependency array.",["48"],["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},{"desc":"52","fix":"54"},"Update the dependencies array to be: [props.task.id, props.todolistId, removeTask]",{"range":"55","text":"56"},"Update the dependencies array to be: [props.task.id, props.todolistId, updateTask]",{"range":"57","text":"58"},{"range":"59","text":"58"},[716,749],"[props.task.id, props.todolistId, removeTask]",[1105,1138],"[props.task.id, props.todolistId, updateTask]",[1328,1361]]