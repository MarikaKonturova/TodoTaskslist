[{"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\store.ts":"1","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"2","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\utils\\error-utils.ts":"3","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"4","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\App.tsx":"5","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Login\\Login.tsx":"6","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\api\\todolists-api.ts":"7","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Login\\auth-reducer.ts":"8","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"9","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\app-reducer.ts":"10","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx":"11","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\AddItemForm\\AddItemForm.tsx":"12"},{"size":1505,"mtime":1622619684315,"results":"13","hashOfConfig":"14"},{"size":1092,"mtime":1596716576000,"results":"15","hashOfConfig":"14"},{"size":811,"mtime":1596719330000,"results":"16","hashOfConfig":"14"},{"size":1773,"mtime":1596295538000,"results":"17","hashOfConfig":"14"},{"size":2710,"mtime":1622635977866,"results":"18","hashOfConfig":"14"},{"size":4335,"mtime":1622633562673,"results":"19","hashOfConfig":"14"},{"size":3224,"mtime":1622635641623,"results":"20","hashOfConfig":"14"},{"size":1522,"mtime":1622625439319,"results":"21","hashOfConfig":"14"},{"size":4165,"mtime":1622634951779,"results":"22","hashOfConfig":"14"},{"size":2903,"mtime":1622635924647,"results":"23","hashOfConfig":"14"},{"size":952,"mtime":1594154724000,"results":"24","hashOfConfig":"14"},{"size":1595,"mtime":1596715562000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17lxa4m",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\store.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],["54","55"],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\utils\\error-utils.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["56","57","58"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\App.tsx",["59","60"],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Login\\Login.tsx",["61"],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\api\\todolists-api.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Login\\auth-reducer.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["62","63","64","65","66","67"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\app-reducer.ts",["68"],"import {Dispatch} from \"redux\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {addTaskAC} from \"../features/TodolistsList/tasks-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (юзер проверен, загружены настройки типа языка и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-INITIALIZED', isInitialized} as const)\r\n\r\nexport const intializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n        }\r\n        dispatch(setInitializedAC(true))\r\n\r\n    })\r\n}\r\n\r\nexport const LogoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.delete().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetInitializedActionType = ReturnType<typeof setInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetInitializedActionType\r\n","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\AddItemForm\\AddItemForm.tsx",["69","70","71"],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":15,"column":97,"nodeType":"78","endLine":15,"endColumn":130,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"77","line":20,"column":8,"nodeType":"78","endLine":20,"endColumn":41,"suggestions":"80"},{"ruleId":"76","severity":1,"message":"77","line":24,"column":8,"nodeType":"78","endLine":24,"endColumn":41,"suggestions":"81"},{"ruleId":"76","severity":1,"message":"82","line":34,"column":8,"nodeType":"78","endLine":34,"endColumn":10,"suggestions":"83"},{"ruleId":"76","severity":1,"message":"84","line":37,"column":8,"nodeType":"78","endLine":37,"endColumn":10,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":67,"column":36,"nodeType":"88","endLine":67,"endColumn":53},{"ruleId":"76","severity":1,"message":"89","line":34,"column":8,"nodeType":"78","endLine":34,"endColumn":10,"suggestions":"90"},{"ruleId":"76","severity":1,"message":"77","line":41,"column":8,"nodeType":"78","endLine":41,"endColumn":42,"suggestions":"91"},{"ruleId":"76","severity":1,"message":"77","line":48,"column":8,"nodeType":"78","endLine":48,"endColumn":54,"suggestions":"92"},{"ruleId":"76","severity":1,"message":"77","line":50,"column":95,"nodeType":"78","endLine":50,"endColumn":134,"suggestions":"93"},{"ruleId":"76","severity":1,"message":"77","line":51,"column":101,"nodeType":"78","endLine":51,"endColumn":140,"suggestions":"94"},{"ruleId":"76","severity":1,"message":"77","line":52,"column":107,"nodeType":"78","endLine":52,"endColumn":146,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":5,"column":9,"nodeType":"98","messageId":"99","endLine":5,"endColumn":18},{"ruleId":"96","severity":1,"message":"100","line":2,"column":9,"nodeType":"98","messageId":"99","endLine":2,"endColumn":12},{"ruleId":"96","severity":1,"message":"101","line":2,"column":14,"nodeType":"98","messageId":"99","endLine":2,"endColumn":20},{"ruleId":"96","severity":1,"message":"102","line":2,"column":22,"nodeType":"98","messageId":"99","endLine":2,"endColumn":33},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["105"],["106"],["107"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["108"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["109"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["110"],["111"],["112"],["113"],["114"],["115"],"@typescript-eslint/no-unused-vars","'addTaskAC' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"116","fix":"118"},{"desc":"116","fix":"119"},{"desc":"120","fix":"121"},{"desc":"120","fix":"122"},{"desc":"123","fix":"124"},{"desc":"116","fix":"125"},{"desc":"116","fix":"126"},{"desc":"116","fix":"127"},{"desc":"116","fix":"128"},{"desc":"116","fix":"129"},"Update the dependencies array to be: [props]",{"range":"130","text":"131"},{"range":"132","text":"131"},{"range":"133","text":"131"},"Update the dependencies array to be: [dispatch]",{"range":"134","text":"135"},{"range":"136","text":"135"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"137","text":"138"},{"range":"139","text":"131"},{"range":"140","text":"131"},{"range":"141","text":"131"},{"range":"142","text":"131"},{"range":"143","text":"131"},[765,798],"[props]",[1071,1104],[1261,1294],[1208,1210],"[dispatch]",[1297,1299],[1394,1396],"[demo, dispatch, props.todolist.id]",[1551,1585],[1816,1862],[1961,2000],[2103,2142],[2251,2290]]