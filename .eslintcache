[{"L:\\prog\\TodoTaskslist\\src\\index.tsx":"1","L:\\prog\\TodoTaskslist\\src\\app\\store.ts":"2","L:\\prog\\TodoTaskslist\\src\\features\\Auth\\auth-reducer.ts":"3","L:\\prog\\TodoTaskslist\\src\\components\\EditableSpan\\EditableSpan.tsx":"4","L:\\prog\\TodoTaskslist\\src\\features\\Auth\\Login.tsx":"5","L:\\prog\\TodoTaskslist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"6","L:\\prog\\TodoTaskslist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"7","L:\\prog\\TodoTaskslist\\src\\utils\\error-utils.ts":"8","L:\\prog\\TodoTaskslist\\src\\features\\TodolistsList\\tasks-reducer.ts":"9","L:\\prog\\TodoTaskslist\\src\\features\\Application\\application-reducer.ts":"10","L:\\prog\\TodoTaskslist\\src\\features\\TodolistsList\\todolists-reducer.ts":"11"},{"size":767,"mtime":1675427626547,"results":"12","hashOfConfig":"13"},{"size":661,"mtime":1675499616870,"results":"14","hashOfConfig":"13"},{"size":2312,"mtime":1675499636798,"results":"15","hashOfConfig":"13"},{"size":952,"mtime":1675427626541,"results":"16","hashOfConfig":"13"},{"size":3998,"mtime":1675496517157,"results":"17","hashOfConfig":"13"},{"size":4248,"mtime":1675496520154,"results":"18","hashOfConfig":"13"},{"size":1137,"mtime":1675496841763,"results":"19","hashOfConfig":"13"},{"size":969,"mtime":1675497268214,"results":"20","hashOfConfig":"13"},{"size":5581,"mtime":1675499640657,"results":"21","hashOfConfig":"13"},{"size":1616,"mtime":1675497583653,"results":"22","hashOfConfig":"13"},{"size":5206,"mtime":1675502232403,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10chbxb",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"L:\\prog\\TodoTaskslist\\src\\index.tsx",[],"L:\\prog\\TodoTaskslist\\src\\app\\store.ts",[],"L:\\prog\\TodoTaskslist\\src\\features\\Auth\\auth-reducer.ts",[],"L:\\prog\\TodoTaskslist\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"L:\\prog\\TodoTaskslist\\src\\features\\Auth\\Login.tsx",["48"],"L:\\prog\\TodoTaskslist\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["49","50","51"],"import React, { useCallback, useEffect } from \"react\";\r\nimport {\r\n  AddItemForm,\r\n  AddItemFormSubmitHelperType,\r\n} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport { EditableSpan } from \"../../../components/EditableSpan/EditableSpan\";\r\nimport { Button, IconButton, Paper, PropTypes } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport { Task } from \"./Task/Task\";\r\nimport { FilterValuesType, TodolistDomainType } from \"../todolists-reducer\";\r\nimport { tasksActions, todolistsActions } from \"../index\";\r\nimport { TaskStatuses, TaskType } from \"../../../api/types\";\r\nimport { useActions, useAppDispatch } from \"../../../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n  todolist: TodolistDomainType;\r\n  tasks: Array<TaskType>;\r\n  demo?: boolean;\r\n};\r\n\r\nexport const Todolist = React.memo(function ({\r\n  demo = false,\r\n  ...props\r\n}: PropsType) {\r\n  const { fetchTasks } = useActions(tasksActions);\r\n  const { removeTodolist, changeTodolistTitle, changeTodolistFilter } =\r\n    useActions(todolistsActions);\r\n\r\n  useEffect(() => {\r\n    if (demo) {\r\n      return;\r\n    }\r\n    fetchTasks(props.todolist.id);\r\n  }, []);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const addTaskCallback = useCallback(\r\n    async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n      let thunk = tasksActions.addTask({\r\n        title: title,\r\n        todolistId: props.todolist.id,\r\n      });\r\n      const resultAction = await dispatch(thunk);\r\n      if (tasksActions.addTask.rejected.match(resultAction)) {\r\n        if (resultAction.payload?.errors?.length) {\r\n          const errorMessage = resultAction.payload?.errors[0];\r\n          helper.setError(errorMessage);\r\n        } else {\r\n          helper.setError(\"Some error occured\");\r\n        }\r\n      } else {\r\n        helper.setTitle(\"\");\r\n      }\r\n    },\r\n    [props.todolist.id]\r\n  );\r\n\r\n  const changeTodolistTitleCallback = useCallback(\r\n    (title: string) => {\r\n      changeTodolistTitle({ id: props.todolist.id, title });\r\n    },\r\n    [props.todolist.id, changeTodolistTitle]\r\n  );\r\n\r\n  const onFilterButtonClickHandler = useCallback(\r\n    (filter: FilterValuesType) => {\r\n      changeTodolistFilter({\r\n        filter: filter,\r\n        id: props.todolist.id,\r\n      });\r\n      console.log(filter);\r\n    },\r\n    [props.todolist.id]\r\n  );\r\n\r\n  const filterButton = (\r\n    todolistFilter: FilterValuesType,\r\n    color: PropTypes.Color,\r\n    text: string\r\n  ) => {\r\n    return (\r\n      <Button\r\n        variant={props.todolist.filter === todolistFilter ? \"outlined\" : \"text\"}\r\n        onClick={() => onFilterButtonClickHandler(todolistFilter)}\r\n        color={color}\r\n      >\r\n        {text}\r\n      </Button>\r\n    );\r\n  };\r\n  let tasksForTodolist = props.tasks;\r\n\r\n  if (props.todolist.filter === \"active\") {\r\n    tasksForTodolist = props.tasks.filter((t) => t.status === TaskStatuses.New);\r\n  }\r\n  if (props.todolist.filter === \"completed\") {\r\n    tasksForTodolist = props.tasks.filter(\r\n      (t) => t.status === TaskStatuses.Completed\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Paper style={{ padding: \"10px\", position: \"relative\" }}>\r\n      <IconButton\r\n        onClick={() => removeTodolist(props.todolist.id)}\r\n        disabled={props.todolist.entityStatus === \"loading\"}\r\n        style={{ position: \"absolute\", right: \"5px\", top: \"5px\" }}\r\n        size={\"small\"}\r\n      >\r\n        <Delete fontSize={\"small\"} />\r\n      </IconButton>\r\n      <h3 style={{ wordWrap: \"break-word\" }}>\r\n        <EditableSpan\r\n          value={props.todolist.title}\r\n          onChange={changeTodolistTitleCallback}\r\n        />\r\n      </h3>\r\n      <AddItemForm\r\n        addItem={addTaskCallback}\r\n        disabled={props.todolist.entityStatus === \"loading\"}\r\n      />\r\n      <div>\r\n        {tasksForTodolist.map((t) => (\r\n          <Task key={t.id} task={t} todolistId={props.todolist.id} />\r\n        ))}\r\n        {!tasksForTodolist.length && (\r\n          <div style={{ padding: \"10px\", color: \"grey\" }}>No task</div>\r\n        )}\r\n      </div>\r\n      <div style={{ paddingTop: \"10px\" }}>\r\n        {filterButton(\"all\", \"default\", \"All\")}\r\n        {filterButton(\"active\", \"primary\", \"Active\")}\r\n        {filterButton(\"completed\", \"secondary\", \"Completed\")}\r\n      </div>\r\n    </Paper>\r\n  );\r\n});\r\n","L:\\prog\\TodoTaskslist\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"L:\\prog\\TodoTaskslist\\src\\utils\\error-utils.ts",[],"L:\\prog\\TodoTaskslist\\src\\features\\TodolistsList\\tasks-reducer.ts",["52"],"L:\\prog\\TodoTaskslist\\src\\features\\Application\\application-reducer.ts",[],"L:\\prog\\TodoTaskslist\\src\\features\\TodolistsList\\todolists-reducer.ts",["53"],"import { todolistsAPI } from \"../../api/todolists-api\";\r\nimport { RequestStatusType } from \"../Application/application-reducer\";\r\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { appActions } from \"../CommonActions/App\";\r\nimport { TodolistType } from \"../../api/types\";\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError,\r\n} from \"../../utils/error-utils\";\r\nimport { ThunkError } from \"../../utils/types\";\r\nimport { AxiosError } from \"axios\";\r\n\r\nconst { setAppStatus } = appActions;\r\nexport const fetchTodolists = createAsyncThunk(\r\n  \"todolist/fetchTodolists\",\r\n  async (_, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({ status: \"loading\" }));\r\n    try {\r\n      const res = await todolistsAPI.getTodolists();\r\n      const todolists = res.data;\r\n      thunkAPI.dispatch(setAppStatus({ status: \"succeeded\" }));\r\n      return { todolists };\r\n    } catch (error) {\r\n      handleServerNetworkError(error as AxiosError, thunkAPI);\r\n      return thunkAPI.rejectWithValue({\r\n        errors: [\"Some error occurred\"],\r\n      });\r\n    }\r\n  }\r\n);\r\nexport const removeTodolist = createAsyncThunk<\r\n  { id: string },\r\n  string,\r\n  ThunkError\r\n>(\"todolist/removeTodolist\", async (todolistId, thunkAPI) => {\r\n  try {\r\n    thunkAPI.dispatch(setAppStatus({ status: \"loading\" }));\r\n    thunkAPI.dispatch(\r\n      changeTodolistEntityStatus({ id: todolistId, status: \"loading\" })\r\n    );\r\n    const res = todolistsAPI.deleteTodolist(todolistId);\r\n    thunkAPI.dispatch(setAppStatus({ status: \"succeeded\" }));\r\n    return { id: todolistId };\r\n  } catch (error) {\r\n    handleServerNetworkError(error as AxiosError, thunkAPI, false);\r\n    return thunkAPI.rejectWithValue({\r\n      errors: [\"Some error occurred\"],\r\n    });\r\n  }\r\n});\r\nexport const addTodolist = createAsyncThunk<\r\n  { todolist: TodolistType },\r\n  string,\r\n  ThunkError\r\n>(\"todolist/addTodolist\", async (title, thunkAPI) => {\r\n  thunkAPI.dispatch(setAppStatus({ status: \"loading\" }));\r\n  try {\r\n    const res = await todolistsAPI.createTodolist(title);\r\n    if (res.data.resultCode === 0) {\r\n      thunkAPI.dispatch(setAppStatus({ status: \"succeeded\" }));\r\n      return { todolist: res.data.data.item };\r\n    } else {\r\n      handleServerAppError(res.data, thunkAPI, false);\r\n      return thunkAPI.rejectWithValue({\r\n        errors: [\"Error with adding todolist\"],\r\n      });\r\n    }\r\n  } catch (error) {\r\n    handleServerNetworkError(error as AxiosError, thunkAPI, false);\r\n    return thunkAPI.rejectWithValue({\r\n      errors: [\"Some error occurred\"],\r\n    });\r\n  }\r\n});\r\nexport const changeTodolistTitle = createAsyncThunk<\r\n  { id: string; title: string },\r\n  { id: string; title: string },\r\n  ThunkError\r\n>(\"todolist/ changeTodolistTitle\", async (param, thunkAPI) => {\r\n  try {\r\n    const res = await todolistsAPI.updateTodolist(param.id, param.title);\r\n    if (res.data.resultCode === 0) {\r\n      return param;\r\n    } else {\r\n      handleServerAppError(res.data, thunkAPI);\r\n      return thunkAPI.rejectWithValue({\r\n        errors: [\"Error with updating todolist\"],\r\n      });\r\n    }\r\n  } catch (error) {\r\n    handleServerNetworkError(error as AxiosError, thunkAPI, false);\r\n    return thunkAPI.rejectWithValue({\r\n      errors: [\"Some error occurred\"],\r\n    });\r\n  }\r\n});\r\n\r\nexport const asyncActions = {\r\n  fetchTodolists,\r\n  removeTodolist,\r\n  addTodolist,\r\n  changeTodolistTitle,\r\n};\r\n\r\nexport const slice = createSlice({\r\n  name: \"todolist\",\r\n  initialState: [] as Array<TodolistDomainType>,\r\n  reducers: {\r\n    changeTodolistFilter(\r\n      state,\r\n      action: PayloadAction<{ id: string; filter: FilterValuesType }>\r\n    ) {\r\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\r\n      state[index].filter = action.payload.filter;\r\n    },\r\n    changeTodolistEntityStatus(\r\n      state,\r\n      action: PayloadAction<{ id: string; status: RequestStatusType }>\r\n    ) {\r\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\r\n      state[index].entityStatus = action.payload.status;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n      return action.payload.todolists.map((tl) => ({\r\n        ...tl,\r\n        filter: \"all\",\r\n        entityStatus: \"idle\",\r\n      }));\r\n    });\r\n    builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n      const index = state.findIndex((tl) => (tl.id = action.payload.id));\r\n      if (index > -1) {\r\n        state.splice(index, 1);\r\n      }\r\n    });\r\n    builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n      state.unshift({\r\n        ...action.payload.todolist,\r\n        filter: \"all\",\r\n        entityStatus: \"idle\",\r\n      });\r\n    });\r\n    builder.addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\r\n      state[index].title = action.payload.title;\r\n    });\r\n  },\r\n});\r\n\r\nexport const { changeTodolistEntityStatus, changeTodolistFilter } =\r\n  slice.actions;\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType;\r\n  entityStatus: RequestStatusType;\r\n};\r\n",{"ruleId":"54","severity":1,"message":"55","line":82,"column":19,"nodeType":"56","endLine":82,"endColumn":36},{"ruleId":"57","severity":1,"message":"58","line":34,"column":6,"nodeType":"59","endLine":34,"endColumn":8,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":56,"column":5,"nodeType":"59","endLine":56,"endColumn":24,"suggestions":"62"},{"ruleId":"57","severity":1,"message":"63","line":74,"column":5,"nodeType":"59","endLine":74,"endColumn":24,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":48,"column":9,"nodeType":"67","messageId":"68","endLine":48,"endColumn":12},{"ruleId":"65","severity":1,"message":"66","line":41,"column":11,"nodeType":"67","messageId":"68","endLine":41,"endColumn":14},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'fetchTasks', and 'props.todolist.id'. Either include them or remove the dependency array.","ArrayExpression",["69"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["70"],"React Hook useCallback has a missing dependency: 'changeTodolistFilter'. Either include it or remove the dependency array.",["71"],"@typescript-eslint/no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar",{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [demo, fetchTasks, props.todolist.id]",{"range":"78","text":"79"},"Update the dependencies array to be: [dispatch, props.todolist.id]",{"range":"80","text":"81"},"Update the dependencies array to be: [changeTodolistFilter, props.todolist.id]",{"range":"82","text":"83"},[1144,1146],"[demo, fetchTasks, props.todolist.id]",[1838,1857],"[dispatch, props.todolist.id]",[2295,2314],"[changeTodolistFilter, props.todolist.id]"]