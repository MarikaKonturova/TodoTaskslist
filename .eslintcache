[{"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\store.ts":"1","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"2","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\utils\\error-utils.ts":"3","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"4","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\App.tsx":"5","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\api\\todolists-api.ts":"6","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"7","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx":"8","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\AddItemForm\\AddItemForm.tsx":"9","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts":"10","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\tasks-reducer.ts":"11","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx":"12","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\api\\types.ts":"13","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\Login.tsx":"14","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\auth-reducer.ts":"15","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Application\\application-reducer.ts":"16","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\index.tsx":"17","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Application\\selectors.ts":"18","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\utils\\redux-utils.ts":"19","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\selectors.tsx":"20","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\index.tsx":"21","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Application\\index.tsx":"22","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\index.tsx":"23","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\CommonActions\\App.ts":"24"},{"size":1557,"mtime":1630135756862,"results":"25","hashOfConfig":"26"},{"size":1222,"mtime":1630142894301,"results":"27","hashOfConfig":"26"},{"size":1272,"mtime":1628864276347,"results":"28","hashOfConfig":"26"},{"size":1951,"mtime":1630151107462,"results":"29","hashOfConfig":"26"},{"size":2753,"mtime":1630143628020,"results":"30","hashOfConfig":"26"},{"size":2067,"mtime":1628858858450,"results":"31","hashOfConfig":"26"},{"size":4170,"mtime":1630230642253,"results":"32","hashOfConfig":"26"},{"size":952,"mtime":1594154724000,"results":"33","hashOfConfig":"26"},{"size":1698,"mtime":1630228220355,"results":"34","hashOfConfig":"26"},{"size":4849,"mtime":1630001488119,"results":"35","hashOfConfig":"26"},{"size":5235,"mtime":1630232004921,"results":"36","hashOfConfig":"26"},{"size":2773,"mtime":1630228555711,"results":"37","hashOfConfig":"26"},{"size":1439,"mtime":1628858858101,"results":"38","hashOfConfig":"26"},{"size":4738,"mtime":1630135756843,"results":"39","hashOfConfig":"26"},{"size":2079,"mtime":1630154875217,"results":"40","hashOfConfig":"26"},{"size":1517,"mtime":1630149581866,"results":"41","hashOfConfig":"26"},{"size":643,"mtime":1611389400000,"results":"42","hashOfConfig":"26"},{"size":218,"mtime":1628859563506,"results":"43","hashOfConfig":"26"},{"size":513,"mtime":1628859563657,"results":"44","hashOfConfig":"26"},{"size":139,"mtime":1628864732255,"results":"45","hashOfConfig":"26"},{"size":619,"mtime":1630001488171,"results":"46","hashOfConfig":"26"},{"size":379,"mtime":1630142574674,"results":"47","hashOfConfig":"26"},{"size":321,"mtime":1630135757143,"results":"48","hashOfConfig":"26"},{"size":350,"mtime":1628864276375,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17lxa4m",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\store.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],["105","106"],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\utils\\error-utils.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["107","108","109"],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\App.tsx",["110","111","112"],"import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {authActions, Login} from \"../features/Auth\";\r\nimport {BrowserRouter, Redirect, Route, Switch} from 'react-router-dom'\r\nimport {appActions} from \"../features/Application\";\r\nimport {selectIsInitialized, selectStatus} from \"../features/Application/selectors\";\r\nimport {selectIsLoggedIn} from \"../features/Auth/selectors\";\r\nimport {useActions, useAppDispatch} from \"../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n\r\n    useEffect(() => {\r\n        initializeApp()\r\n    }, [])\r\n    const LogoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [])\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: 'fixed', width: '100%', top: '30%', left: '50%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn ? <Button color=\"inherit\" onClick={LogoutHandler}>Log out</Button> : null}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\api\\todolists-api.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["113","114","115"],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\AddItemForm\\AddItemForm.tsx",[],["116","117"],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts",["118"],"import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport {TodolistType} from \"../../api/types\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {ThunkError} from \"../../utils/types\";\r\n\r\nconst {setAppStatus} = appActions\r\nexport const fetchTodolists = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolist/fetchTodolists',\r\n    async (_, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.getTodolists()\r\n            const todolists = res.data\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolists}\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI)\r\n        }\r\n    }\r\n)\r\nexport const removeTodolist = createAsyncThunk<{ id: string }, string, ThunkError>('todolist/removeTodolist',\r\n    async (todolistId, thunkAPI) => {\r\n        try {\r\n            thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n            thunkAPI.dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'},))\r\n            const res = todolistsAPI.deleteTodolist(todolistId)\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: todolistId}\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    })\r\nexport const addTodolist = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>('todolist/addTodolist',\r\n    async (title, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTodolist(title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {todolist: res.data.data.item}\r\n            } else {\r\n                return handleServerAppError(res.data, thunkAPI, false)\r\n            }\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    })\r\nexport const changeTodolistTitle = createAsyncThunk<{ id: string, title: string }, { id: string, title: string }, ThunkError>('todolist/ changeTodolistTitle',\r\n    async (param, thunkAPI) => {\r\n        try {\r\n            const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                return param\r\n            } else {\r\n                return handleServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI, false)\r\n        }\r\n\r\n    })\r\n\r\nexport const asyncActions = {\r\n    fetchTodolists,\r\n    removeTodolist,\r\n    addTodolist,\r\n    changeTodolistTitle\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id = action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        });\r\n        builder.addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        });\r\n\r\n    }\r\n})\r\n\r\nexport const {changeTodolistEntityStatus, changeTodolistFilter} = slice.actions\r\n// types\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\tasks-reducer.ts",["119"],"import {todolistsAPI} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {addTodolist, fetchTodolists, removeTodolist} from \"./todolists-reducer\";\r\nimport {appActions} from '../CommonActions/App'\r\nimport {AppRootStateType, ThunkError} from \"../../utils/types\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, TodolistType, UpdateTaskModelType} from \"../../api/types\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleServerNetworkError(error, thunkAPI)\r\n\r\n    }\r\n\r\n})\r\nexport const removeTask = createAsyncThunk<{ todolistId: string, taskId: string }, { todolistId: string, taskId: string }, ThunkError>('tasks/removeTask',\r\n    async (param, thunkAPI) => {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {todolistId: param.todolistId, taskId: param.taskId}\r\n    })\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                const task = res.data.data.item\r\n                return task\r\n            } else {\r\n                return handleServerAppError(res.data, thunkAPI, false);\r\n\r\n            }\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    })\r\n\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: {\r\n    taskId: string,\r\n    domainModel: UpdateDomainTaskModelType,\r\n    todolistId: string\r\n}, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find((t: TaskType) => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleServerAppError(res.data, thunkAPI);\r\n\r\n        }\r\n    } catch (error) {\r\n        return handleServerNetworkError(error, thunkAPI);\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks, removeTask, addTask, updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: TodolistType) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n})\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx",["120","121"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {todolistsActions} from \"./index\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const {fetchTodolists} = useActions(todolistsActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        fetchTodolists()\r\n    }, [])\r\n\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        const thunk = todolistsActions.addTodolist(title)\r\n        const resultAction = await dispatch(thunk)\r\n        if (todolistsActions.addTodolist.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{flexWrap: 'wrap', width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\api\\types.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\Login.tsx",["122"],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\auth-reducer.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Application\\application-reducer.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\index.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Application\\selectors.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\utils\\redux-utils.ts",["123"],"import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}\r\n","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\selectors.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\index.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Application\\index.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\index.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\CommonActions\\App.ts",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":16,"column":65,"nodeType":"130","endLine":16,"endColumn":98,"suggestions":"131"},{"ruleId":"128","severity":1,"message":"132","line":25,"column":8,"nodeType":"130","endLine":25,"endColumn":41,"suggestions":"133"},{"ruleId":"128","severity":1,"message":"132","line":29,"column":8,"nodeType":"130","endLine":29,"endColumn":41,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":22,"column":21,"nodeType":"137","messageId":"138","endLine":22,"endColumn":35},{"ruleId":"128","severity":1,"message":"139","line":39,"column":8,"nodeType":"130","endLine":39,"endColumn":10,"suggestions":"140"},{"ruleId":"128","severity":1,"message":"141","line":42,"column":8,"nodeType":"130","endLine":42,"endColumn":10,"suggestions":"142"},{"ruleId":"128","severity":1,"message":"143","line":28,"column":8,"nodeType":"130","endLine":28,"endColumn":10,"suggestions":"144"},{"ruleId":"128","severity":1,"message":"145","line":48,"column":8,"nodeType":"130","endLine":48,"endColumn":27,"suggestions":"146"},{"ruleId":"128","severity":1,"message":"147","line":61,"column":8,"nodeType":"130","endLine":61,"endColumn":27,"suggestions":"148"},{"ruleId":"124","replacedBy":"149"},{"ruleId":"126","replacedBy":"150"},{"ruleId":"135","severity":1,"message":"151","line":28,"column":19,"nodeType":"137","messageId":"138","endLine":28,"endColumn":22},{"ruleId":"135","severity":1,"message":"151","line":26,"column":15,"nodeType":"137","messageId":"138","endLine":26,"endColumn":18},{"ruleId":"135","severity":1,"message":"152","line":5,"column":15,"nodeType":"137","messageId":"138","endLine":5,"endColumn":20},{"ruleId":"128","severity":1,"message":"153","line":29,"column":8,"nodeType":"130","endLine":29,"endColumn":10,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":77,"column":36,"nodeType":"157","endLine":77,"endColumn":53},{"ruleId":"128","severity":1,"message":"158","line":13,"column":8,"nodeType":"130","endLine":13,"endColumn":10,"suggestions":"159"},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'removeTask'. Either include it or remove the dependency array.","ArrayExpression",["162"],"React Hook useCallback has a missing dependency: 'updateTask'. Either include it or remove the dependency array.",["163"],["164"],"@typescript-eslint/no-unused-vars","'useAppDispatch' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'initializeApp'. Either include it or remove the dependency array.",["165"],"React Hook useCallback has a missing dependency: 'logout'. Either include it or remove the dependency array.",["166"],"React Hook useEffect has missing dependencies: 'demo', 'fetchTasks', and 'props.todolist.id'. Either include them or remove the dependency array.",["167"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["168"],"React Hook useCallback has a missing dependency: 'changeTodolistFilter'. Either include it or remove the dependency array.",["169"],["160"],["161"],"'res' is assigned a value but never used.","'Paper' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'fetchTodolists', and 'isLoggedIn'. Either include them or remove the dependency array.",["170"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useMemo has missing dependencies: 'actions' and 'dispatch'. Either include them or remove the dependency array.",["171"],"no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"174","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},"Update the dependencies array to be: [props.task.id, props.todolistId, removeTask]",{"range":"191","text":"192"},"Update the dependencies array to be: [props.task.id, props.todolistId, updateTask]",{"range":"193","text":"194"},{"range":"195","text":"194"},"Update the dependencies array to be: [initializeApp]",{"range":"196","text":"197"},"Update the dependencies array to be: [logout]",{"range":"198","text":"199"},"Update the dependencies array to be: [demo, fetchTasks, props.todolist.id]",{"range":"200","text":"201"},"Update the dependencies array to be: [dispatch, props.todolist.id]",{"range":"202","text":"203"},"Update the dependencies array to be: [changeTodolistFilter, props.todolist.id]",{"range":"204","text":"205"},"Update the dependencies array to be: [demo, fetchTodolists, isLoggedIn]",{"range":"206","text":"207"},"Update the dependencies array to be: [actions, dispatch]",{"range":"208","text":"209"},[716,749],"[props.task.id, props.todolistId, removeTask]",[1105,1138],"[props.task.id, props.todolistId, updateTask]",[1328,1361],[1259,1261],"[initializeApp]",[1336,1338],"[logout]",[1117,1119],"[demo, fetchTasks, props.todolist.id]",[1834,1853],"[dispatch, props.todolist.id]",[2275,2294],"[changeTodolistFilter, props.todolist.id]",[1231,1233],"[demo, fetchTodolists, isLoggedIn]",[478,480],"[actions, dispatch]"]