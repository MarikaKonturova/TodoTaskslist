[{"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\store.ts":"1","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"2","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\utils\\error-utils.ts":"3","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"4","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\App.tsx":"5","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\api\\todolists-api.ts":"6","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"7","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx":"8","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\AddItemForm\\AddItemForm.tsx":"9","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts":"10","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\tasks-reducer.ts":"11","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx":"12","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\api\\types.ts":"13","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\Login.tsx":"14","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\auth-reducer.ts":"15","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Application\\application-reducer.ts":"16","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\index.tsx":"17","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Application\\selectors.ts":"18","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\utils\\redux-utils.ts":"19","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\selectors.tsx":"20","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\index.tsx":"21","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Application\\index.tsx":"22","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\index.tsx":"23","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\CommonActions\\App.ts":"24"},{"size":1557,"mtime":1630135756862,"results":"25","hashOfConfig":"26"},{"size":1222,"mtime":1630142894301,"results":"27","hashOfConfig":"26"},{"size":1272,"mtime":1628864276347,"results":"28","hashOfConfig":"26"},{"size":1951,"mtime":1630151107462,"results":"29","hashOfConfig":"26"},{"size":2591,"mtime":1630412700201,"results":"30","hashOfConfig":"26"},{"size":2067,"mtime":1628858858450,"results":"31","hashOfConfig":"26"},{"size":4170,"mtime":1630230642253,"results":"32","hashOfConfig":"26"},{"size":952,"mtime":1594154724000,"results":"33","hashOfConfig":"26"},{"size":1698,"mtime":1630228220355,"results":"34","hashOfConfig":"26"},{"size":4849,"mtime":1630001488119,"results":"35","hashOfConfig":"26"},{"size":5235,"mtime":1630232004921,"results":"36","hashOfConfig":"26"},{"size":2773,"mtime":1630228555711,"results":"37","hashOfConfig":"26"},{"size":1439,"mtime":1628858858101,"results":"38","hashOfConfig":"26"},{"size":4738,"mtime":1630135756843,"results":"39","hashOfConfig":"26"},{"size":2079,"mtime":1630154875217,"results":"40","hashOfConfig":"26"},{"size":1517,"mtime":1630149581866,"results":"41","hashOfConfig":"26"},{"size":743,"mtime":1630412755157,"results":"42","hashOfConfig":"26"},{"size":218,"mtime":1628859563506,"results":"43","hashOfConfig":"26"},{"size":513,"mtime":1628859563657,"results":"44","hashOfConfig":"26"},{"size":139,"mtime":1628864732255,"results":"45","hashOfConfig":"26"},{"size":619,"mtime":1630001488171,"results":"46","hashOfConfig":"26"},{"size":379,"mtime":1630142574674,"results":"47","hashOfConfig":"26"},{"size":321,"mtime":1630135757143,"results":"48","hashOfConfig":"26"},{"size":350,"mtime":1628864276375,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17lxa4m",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\store.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],["106","107"],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\utils\\error-utils.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["108","109","110"],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\app\\App.tsx",["111","112","113"],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\api\\todolists-api.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["114","115","116"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistsActions} from \"../index\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/types\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {removeTodolist, changeTodolistTitle, changeTodolistFilter} = useActions(todolistsActions)\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks(props.todolist.id)\r\n    }, [])\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        debugger\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n\r\n    }, [props.todolist.id])\r\n\r\n\r\n    const changeTodolistTitleCallback = useCallback((title: string) => {\r\n        changeTodolistTitle({id: props.todolist.id, title})\r\n    }, [props.todolist.id, changeTodolistTitle])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => {\r\n        changeTodolistFilter({\r\n            filter: filter,\r\n            id: props.todolist.id\r\n        })\r\n        console.log(filter)\r\n    }, [props.todolist.id])\r\n\r\n    const filterButton = (todolistFilter: FilterValuesType, color: PropTypes.Color, text: string) => {\r\n        return <Button variant={props.todolist.filter === todolistFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(todolistFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton onClick={() => removeTodolist(props.todolist.id)}\r\n                    disabled={props.todolist.entityStatus === 'loading'}\r\n                    style={{position: 'absolute', right: '5px', top: '5px'}}\r\n                    size={'small'}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3 style={{wordWrap: 'break-word'}}>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitleCallback}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No task</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {filterButton('all', 'default', 'All')}\r\n            {filterButton('active', 'primary', 'Active')}\r\n            {filterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n\r\n",["117","118"],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\EditableSpan\\EditableSpan.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\components\\AddItemForm\\AddItemForm.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\todolists-reducer.ts",["119"],"import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport {TodolistType} from \"../../api/types\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {ThunkError} from \"../../utils/types\";\r\n\r\nconst {setAppStatus} = appActions\r\nexport const fetchTodolists = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolist/fetchTodolists',\r\n    async (_, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.getTodolists()\r\n            const todolists = res.data\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolists}\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI)\r\n        }\r\n    }\r\n)\r\nexport const removeTodolist = createAsyncThunk<{ id: string }, string, ThunkError>('todolist/removeTodolist',\r\n    async (todolistId, thunkAPI) => {\r\n        try {\r\n            thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n            thunkAPI.dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'},))\r\n            const res = todolistsAPI.deleteTodolist(todolistId)\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: todolistId}\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    })\r\nexport const addTodolist = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>('todolist/addTodolist',\r\n    async (title, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTodolist(title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n                return {todolist: res.data.data.item}\r\n            } else {\r\n                return handleServerAppError(res.data, thunkAPI, false)\r\n            }\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    })\r\nexport const changeTodolistTitle = createAsyncThunk<{ id: string, title: string }, { id: string, title: string }, ThunkError>('todolist/ changeTodolistTitle',\r\n    async (param, thunkAPI) => {\r\n        try {\r\n            const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                return param\r\n            } else {\r\n                return handleServerAppError(res.data, thunkAPI)\r\n            }\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI, false)\r\n        }\r\n\r\n    })\r\n\r\nexport const asyncActions = {\r\n    fetchTodolists,\r\n    removeTodolist,\r\n    addTodolist,\r\n    changeTodolistTitle\r\n}\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id = action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        });\r\n        builder.addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        });\r\n\r\n    }\r\n})\r\n\r\nexport const {changeTodolistEntityStatus, changeTodolistFilter} = slice.actions\r\n// types\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\tasks-reducer.ts",["120"],"import {todolistsAPI} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {addTodolist, fetchTodolists, removeTodolist} from \"./todolists-reducer\";\r\nimport {appActions} from '../CommonActions/App'\r\nimport {AppRootStateType, ThunkError} from \"../../utils/types\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, TodolistType, UpdateTaskModelType} from \"../../api/types\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleServerNetworkError(error, thunkAPI)\r\n\r\n    }\r\n\r\n})\r\nexport const removeTask = createAsyncThunk<{ todolistId: string, taskId: string }, { todolistId: string, taskId: string }, ThunkError>('tasks/removeTask',\r\n    async (param, thunkAPI) => {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {todolistId: param.todolistId, taskId: param.taskId}\r\n    })\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                const task = res.data.data.item\r\n                return task\r\n            } else {\r\n                return handleServerAppError(res.data, thunkAPI, false);\r\n\r\n            }\r\n        } catch (error) {\r\n            return handleServerNetworkError(error, thunkAPI, false)\r\n        }\r\n    })\r\n\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: {\r\n    taskId: string,\r\n    domainModel: UpdateDomainTaskModelType,\r\n    todolistId: string\r\n}, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find((t: TaskType) => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleServerAppError(res.data, thunkAPI);\r\n\r\n        }\r\n    } catch (error) {\r\n        return handleServerNetworkError(error, thunkAPI);\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks, removeTask, addTask, updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach((tl: TodolistType) => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        })\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n})\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\TodolistsList.tsx",["121","122"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {todolistsActions} from \"./index\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const {fetchTodolists} = useActions(todolistsActions)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        fetchTodolists()\r\n    }, [])\r\n\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        const thunk = todolistsActions.addTodolist(title)\r\n        const resultAction = await dispatch(thunk)\r\n        if (todolistsActions.addTodolist.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{flexWrap: 'wrap', width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\api\\types.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\Login.tsx",["123"],"import React from 'react'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from \"@material-ui/core\";\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\nimport {authActions, authSelectors} from \"./index\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\ntype FormikFormType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const {login} = useActions(authActions)\r\n    const dispatch = useAppDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            /*if (!values.email) {\r\n                errors.email = 'email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }*/\r\n            if (!values.password) {\r\n                errors.password = 'password is required';\r\n            } else if (values.password.length <= 2) {\r\n                errors.password = 'password must be at least 3 letters long';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values: FormikFormType, formikHelpers: FormikHelpers<FormikFormType>) => {\r\n            const action = await dispatch(login(values))\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                    debugger\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return (\r\n        <Grid container justify='center'>\r\n            <Grid item xs={4}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'}> here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label='email'\r\n                                margin='normal'\r\n                                {...formik.getFieldProps('email')}\r\n                                onBlur={formik.handleBlur}/>\r\n                            {formik.touched.email && formik.errors.email ?\r\n                                <div style={{color: 'red'}}>\r\n                                    {formik.errors.email}\r\n                                </div> : null}\r\n                            <TextField\r\n                                type='password'\r\n                                label='password'\r\n                                margin='normal'\r\n                                {...formik.getFieldProps('password')}\r\n                                onBlur={formik.handleBlur}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password ?\r\n                                <div style={{color: 'red'}}>\r\n                                    {formik.errors.password}\r\n                                </div> : null}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.rememberMe}\r\n                                    name='rememberMe'\r\n                                />}/>\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\auth-reducer.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Application\\application-reducer.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\index.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Application\\selectors.ts",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\utils\\redux-utils.ts",["124"],"import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}\r\n","D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\selectors.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\TodolistsList\\index.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Application\\index.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\Auth\\index.tsx",[],"D:\\react\\itkamasutra-com\\projects\\01-first-project\\todolist-16\\src\\features\\CommonActions\\App.ts",[],{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":16,"column":65,"nodeType":"131","endLine":16,"endColumn":98,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"133","line":25,"column":8,"nodeType":"131","endLine":25,"endColumn":41,"suggestions":"134"},{"ruleId":"129","severity":1,"message":"133","line":29,"column":8,"nodeType":"131","endLine":29,"endColumn":41,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":18,"column":9,"nodeType":"138","messageId":"139","endLine":18,"endColumn":19},{"ruleId":"129","severity":1,"message":"140","line":39,"column":8,"nodeType":"131","endLine":39,"endColumn":10,"suggestions":"141"},{"ruleId":"129","severity":1,"message":"142","line":42,"column":8,"nodeType":"131","endLine":42,"endColumn":10,"suggestions":"143"},{"ruleId":"129","severity":1,"message":"144","line":28,"column":8,"nodeType":"131","endLine":28,"endColumn":10,"suggestions":"145"},{"ruleId":"129","severity":1,"message":"146","line":48,"column":8,"nodeType":"131","endLine":48,"endColumn":27,"suggestions":"147"},{"ruleId":"129","severity":1,"message":"148","line":61,"column":8,"nodeType":"131","endLine":61,"endColumn":27,"suggestions":"149"},{"ruleId":"125","replacedBy":"150"},{"ruleId":"127","replacedBy":"151"},{"ruleId":"136","severity":1,"message":"152","line":28,"column":19,"nodeType":"138","messageId":"139","endLine":28,"endColumn":22},{"ruleId":"136","severity":1,"message":"152","line":26,"column":15,"nodeType":"138","messageId":"139","endLine":26,"endColumn":18},{"ruleId":"136","severity":1,"message":"153","line":5,"column":15,"nodeType":"138","messageId":"139","endLine":5,"endColumn":20},{"ruleId":"129","severity":1,"message":"154","line":29,"column":8,"nodeType":"131","endLine":29,"endColumn":10,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":77,"column":36,"nodeType":"158","endLine":77,"endColumn":53},{"ruleId":"129","severity":1,"message":"159","line":13,"column":8,"nodeType":"131","endLine":13,"endColumn":10,"suggestions":"160"},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'removeTask'. Either include it or remove the dependency array.","ArrayExpression",["163"],"React Hook useCallback has a missing dependency: 'updateTask'. Either include it or remove the dependency array.",["164"],["165"],"@typescript-eslint/no-unused-vars","'HashRouter' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'initializeApp'. Either include it or remove the dependency array.",["166"],"React Hook useCallback has a missing dependency: 'logout'. Either include it or remove the dependency array.",["167"],"React Hook useEffect has missing dependencies: 'demo', 'fetchTasks', and 'props.todolist.id'. Either include them or remove the dependency array.",["168"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["169"],"React Hook useCallback has a missing dependency: 'changeTodolistFilter'. Either include it or remove the dependency array.",["170"],["161"],["162"],"'res' is assigned a value but never used.","'Paper' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'fetchTodolists', and 'isLoggedIn'. Either include them or remove the dependency array.",["171"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","React Hook useMemo has missing dependencies: 'actions' and 'dispatch'. Either include them or remove the dependency array.",["172"],"no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"175","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},"Update the dependencies array to be: [props.task.id, props.todolistId, removeTask]",{"range":"192","text":"193"},"Update the dependencies array to be: [props.task.id, props.todolistId, updateTask]",{"range":"194","text":"195"},{"range":"196","text":"195"},"Update the dependencies array to be: [initializeApp]",{"range":"197","text":"198"},"Update the dependencies array to be: [logout]",{"range":"199","text":"200"},"Update the dependencies array to be: [demo, fetchTasks, props.todolist.id]",{"range":"201","text":"202"},"Update the dependencies array to be: [dispatch, props.todolist.id]",{"range":"203","text":"204"},"Update the dependencies array to be: [changeTodolistFilter, props.todolist.id]",{"range":"205","text":"206"},"Update the dependencies array to be: [demo, fetchTodolists, isLoggedIn]",{"range":"207","text":"208"},"Update the dependencies array to be: [actions, dispatch]",{"range":"209","text":"210"},[716,749],"[props.task.id, props.todolistId, removeTask]",[1105,1138],"[props.task.id, props.todolistId, updateTask]",[1328,1361],[1240,1242],"[initializeApp]",[1317,1319],"[logout]",[1117,1119],"[demo, fetchTasks, props.todolist.id]",[1834,1853],"[dispatch, props.todolist.id]",[2275,2294],"[changeTodolistFilter, props.todolist.id]",[1231,1233],"[demo, fetchTodolists, isLoggedIn]",[478,480],"[actions, dispatch]"]